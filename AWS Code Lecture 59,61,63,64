
*********************** Lecture 59 ***********************************

import boto3
from uuid import uuid4
def lambda_handler(event, context):
    s3 = boto3.client("s3")
    dynamodb = boto3.resource('dynamodb')
    for record in event['Records']:
        bucket_name = record['s3']['bucket']['name']
        object_key = record['s3']['object']['key']
        size = record['s3']['object'].get('size', -1)
        event_name = record ['eventName']
        event_time = record['eventTime']
        dynamoTable = dynamodb.Table('uita-table')
        dynamoTable.put_item(
            Item={'RequestId': str(uuid4()), 'Bucket': bucket_name, 'Object': object_key,'Size': size, 'Event': event_name, 'EventTime': event_time})
 

 ********************* Lecture 61  ***************************************

import boto3
ec2 = boto3.resource('ec2')
def lambda_handler(event, context):
    filter = [
        {
            'Name': 'tag:Type',
            'Values':['Scheduled']
            
        }
        ]
    instances = ec2.instances.filter(Filters=filter)
    for instance in instances:
        instance.start()
    return 'Check your EC2 instance status'

	
************************  Lecture 62 ***************************************

import boto3
ec2 = boto3.resource('ec2')
def lambda_handler(event, context):
    ec2_filter = [{'Name': 'instance-state-name', 'Values': ['running']}]
    ec2.instances.filter(Filters=ec2_filter).stop()

************************* Lecture 63 **********************************

 
 import boto3
 client = boto3.client('sns')
 
 def lambda_handler(event, context):
 topic_arn = ' ARN No ?'
 message = 'Web server instance state is changed'
 client.publish(TopicArn=topic_arn, Message=message)

 
*************************** Lecture 64 ***********************************

import boto3, json
def lambda_handler(event, context):
    invokeLam = boto3.client("lambda", region_name="us-east-1")
    payload = {"message": " Hi, you have been invoked."}
    resp = invokeLam.invoke(FunctionName = "Lambda_Function2", InvocationType = "Event OR RequestResponse", Payload = json.dumps(payload))
    #print(resp["Payload"].read())
	return "Hello from Lambda"



Lambda_Funtion2:
def lambda_handler(event, context):
    print(event)
    #return ("Hello from Lambda2")
	

****************************************************************
  

